import{_ as i}from"./chunks/plugin-vue_export-helper.DlAUqK2U.js";import{i as a,o as e,Y as l}from"./chunks/vue.CKrRORKQ.js";const g=JSON.parse('{"title":"贡献指南","description":"","frontmatter":{},"headers":[],"relativePath":"contributing.md","filePath":"contributing.md"}'),t={name:"contributing.md"};function n(h,s,p,d,r,k){return e(),a("div",null,s[0]||(s[0]=[l(`<h1 id="贡献指南" tabindex="-1">贡献指南 <a class="header-anchor" href="#贡献指南" aria-label="Permalink to “贡献指南”">​</a></h1><p>感谢您对本项目感兴趣！</p><blockquote><p><strong>警告</strong>: <strong>⚠️ 新功能开发放缓</strong></p><p>随着 VueUse 的用户群体不断增长，我们收到了大量的功能请求和 Pull Request。因此，维护项目变得越来越具有挑战性，已经达到了我们的能力极限。因此，在不久的将来，我们可能需要放缓新功能的接受速度，优先考虑现有功能的稳定性和质量。**请注意，目前可能不会接受 VueUse 的新功能。**如果您有任何新想法，我们建议您首先将其整合到自己的代码库中，根据您的需求进行迭代，并评估其通用性。如果您坚信您的想法对社区有益，您可以提交 Pull Request 并附上您的用例，我们很乐意审查和讨论它们。感谢您的理解。</p></blockquote><h2 id="开发" tabindex="-1">开发 <a class="header-anchor" href="#开发" aria-label="Permalink to “开发”">​</a></h2><h3 id="环境搭建" tabindex="-1">环境搭建 <a class="header-anchor" href="#环境搭建" aria-label="Permalink to “环境搭建”">​</a></h3><p>克隆此仓库到您的本地机器并安装依赖。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes vitesse-light vitesse-dark" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">pnpm</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> install</span></span></code></pre></div><p>我们使用 VitePress 进行快速开发和文档编写。您可以通过以下命令在本地启动：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes vitesse-light vitesse-dark" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">pnpm</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> dev</span></span></code></pre></div><h3 id="测试" tabindex="-1">测试 <a class="header-anchor" href="#测试" aria-label="Permalink to “测试”">​</a></h3><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes vitesse-light vitesse-dark" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">pnpm</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> test:unit</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # 运行单元测试</span></span></code></pre></div><p>如果您想使用实验性的浏览器测试，需要先安装 playwright 依赖。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes vitesse-light vitesse-dark" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">nlx</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> playwright</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> install</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --with-deps</span></span></code></pre></div><p>然后运行</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes vitesse-light vitesse-dark" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">pnpm</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> test:browser</span></span></code></pre></div><h2 id="贡献方式" tabindex="-1">贡献方式 <a class="header-anchor" href="#贡献方式" aria-label="Permalink to “贡献方式”">​</a></h2><h3 id="现有功能" tabindex="-1">现有功能 <a class="header-anchor" href="#现有功能" aria-label="Permalink to “现有功能”">​</a></h3><p>欢迎增强现有功能。请尽量不要引入破坏性更改。</p><h3 id="新功能" tabindex="-1">新功能 <a class="header-anchor" href="#新功能" aria-label="Permalink to “新功能”">​</a></h3><p>添加新功能时需要注意以下几点：</p><ul><li>在开始工作之前，最好先开一个 issue 进行讨论。</li><li>实现应该放在 <code>packages/core</code> 目录下作为一个文件夹，并在 <code>index.ts</code> 中导出。</li><li>在 <code>core</code> 包中，尽量不要引入第三方依赖，因为这个包的目标是尽可能轻量。</li><li>如果您想引入第三方依赖，请贡献到 <a href="https://github.com/vueuse/vueuse/tree/main/packages/integrations" target="_blank" rel="noreferrer">@vueuse/integrations</a> 或创建一个新的插件。</li><li>您可以在 <code>packages/core/_template/</code> 下找到函数模板，详细信息在 <a href="#function-folder">函数文件夹</a> 部分中说明。</li><li>在编写函数文档时，<code>&lt;!--FOOTER_STARTS--&gt;</code> 和 <code>&lt;!--FOOTER_ENDS--&gt;</code> 会在构建时自动更新，所以不需要手动更新它们。</li></ul><blockquote><p>请注意，您不需要更新包的 <code>index.ts</code>。它们是自动生成的。</p></blockquote><h3 id="新插件" tabindex="-1">新插件 <a class="header-anchor" href="#新插件" aria-label="Permalink to “新插件”">​</a></h3><p>新插件非常受欢迎！</p><ul><li>在 <code>packages/</code> 下创建一个新文件夹，以您的插件名称命名。</li><li>在 <code>scripts/packages.ts</code> 中添加插件详情。</li><li>在该文件夹下创建 <code>README.md</code>。</li><li>像在核心包中一样添加函数。</li><li>提交并提交 PR。</li></ul><h2 id="项目结构" tabindex="-1">项目结构 <a class="header-anchor" href="#项目结构" aria-label="Permalink to “项目结构”">​</a></h2><h3 id="单仓库" tabindex="-1">单仓库 <a class="header-anchor" href="#单仓库" aria-label="Permalink to “单仓库”">​</a></h3><p>我们使用单仓库来管理多个包</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes vitesse-light vitesse-dark" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span>packages</span></span>
<span class="line"><span>  shared/         - 跨包共享的工具</span></span>
<span class="line"><span>  core/           - 核心包</span></span>
<span class="line"><span>  firebase/       - Firebase 插件</span></span>
<span class="line"><span>  [...addons]/    - 命名的插件</span></span></code></pre></div><h3 id="函数文件夹" tabindex="-1">函数文件夹 <a class="header-anchor" href="#函数文件夹" aria-label="Permalink to “函数文件夹”">​</a></h3><p>函数文件夹通常包含这 4 个文件：</p><blockquote><p>您可以在 <code>packages/core/_template/</code> 下找到模板</p></blockquote><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes vitesse-light vitesse-dark" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">index.ts</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">            # 函数源代码本身</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">demo.vue</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">            # 文档演示</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">index.test.ts</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">       # vitest 单元测试</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">index.md</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">            # 文档</span></span></code></pre></div><p>对于 <code>index.ts</code>，您应该使用命名导出函数。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes vitesse-light vitesse-dark" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 正确做法</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">export</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> useMyFunction</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 错误做法</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">export</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> default</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> useMyFunction</span></span></code></pre></div><p>对于 <code>index.md</code>，第一句话将作为函数列表中的简短介绍显示，所以请尽量简洁明了。</p><div class="language-markdown"><button title="Copy Code" class="copy"></button><span class="lang">markdown</span><pre class="shiki shiki-themes vitesse-light vitesse-dark" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#999999;--shiki-light-font-weight:bold;--shiki-dark:#666666;--shiki-dark-font-weight:bold;">#</span><span style="--shiki-light:#1C6B48;--shiki-light-font-weight:bold;--shiki-dark:#4D9375;--shiki-dark-font-weight:bold;"> useMyFunction</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">这将是介绍。详细描述...</span></span></code></pre></div><p>阅读更多关于<a href="/vueuse/guidelines.html">指南</a>的内容。</p><h2 id="代码风格" tabindex="-1">代码风格 <a class="header-anchor" href="#代码风格" aria-label="Permalink to “代码风格”">​</a></h2><p>只要您安装了开发依赖，就不必担心代码风格。Git hooks 会在提交时自动格式化和修复它们。</p><h2 id="感谢" tabindex="-1">感谢 <a class="header-anchor" href="#感谢" aria-label="Permalink to “感谢”">​</a></h2><p>再次感谢您对本项目感兴趣！您太棒了！</p>`,42)]))}const b=i(t,[["render",n]]);export{g as __pageData,b as default};
