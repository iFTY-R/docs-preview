import{_ as o,c as r,a2 as a,o as t}from"./chunks/framework.XosO8Wyc.js";const u=JSON.parse('{"title":"接口：RouteRecordNormalized","description":"","frontmatter":{"editLink":false},"headers":[],"relativePath":"zh/api/interfaces/RouteRecordNormalized.md","filePath":"zh/api/interfaces/RouteRecordNormalized.md"}'),d={name:"zh/api/interfaces/RouteRecordNormalized.md"};function i(c,e,n,s,p,h){return t(),r("div",null,e[0]||(e[0]=[a('<p><a href="./../">API 参考</a> / RouteRecordNormalized</p><h1 id="接口-RouteRecordNormalized" tabindex="-1">接口：RouteRecordNormalized <a class="header-anchor" href="#接口-RouteRecordNormalized" aria-label="Permalink to &quot;接口：RouteRecordNormalized&quot;">​</a></h1><p>一条<a href="./../#routerecord">路由记录</a>的规范化版本。</p><h2 id="Hierarchy" tabindex="-1">继承关系 <a class="header-anchor" href="#Hierarchy" aria-label="Permalink to &quot;继承关系 %{#Hierarchy}%&quot;">​</a></h2><ul><li><p><strong><code>RouteRecordNormalized</code></strong></p><p>↳ <a href="./RouteLocationMatched.html"><code>RouteLocationMatched</code></a></p></li></ul><h2 id="Properties" tabindex="-1">属性 <a class="header-anchor" href="#Properties" aria-label="Permalink to &quot;属性 %{#Properties}%&quot;">​</a></h2><h3 id="Properties-aliasOf" tabindex="-1">aliasOf <a class="header-anchor" href="#Properties-aliasOf" aria-label="Permalink to &quot;aliasOf %{#Properties-aliasOf}%&quot;">​</a></h3><p>• <strong>aliasOf</strong>: <code>undefined</code> | <a href="./RouteRecordNormalized.html"><code>RouteRecordNormalized</code></a></p><p>定义了是否这条记录是另一条的别名。如果记录是原始记录，则该属性为 <code>undefined</code>。</p><hr><h3 id="Properties-beforeEnter" tabindex="-1">beforeEnter <a class="header-anchor" href="#Properties-beforeEnter" aria-label="Permalink to &quot;beforeEnter %{#Properties-beforeEnter}%&quot;">​</a></h3><p>• <strong>beforeEnter</strong>: <code>undefined</code> | <a href="./NavigationGuardWithThis.html"><code>NavigationGuardWithThis</code></a>&lt;<code>undefined</code>&gt; | <a href="./NavigationGuardWithThis.html"><code>NavigationGuardWithThis</code></a>&lt;<code>undefined</code>&gt;[]</p><p>被注册的 beforeEnter 守卫</p><hr><h3 id="Properties-children" tabindex="-1">children <a class="header-anchor" href="#Properties-children" aria-label="Permalink to &quot;children %{#Properties-children}%&quot;">​</a></h3><p>• <strong>children</strong>: <a href="./../#routerecordraw"><code>RouteRecordRaw</code></a>[]</p><p>嵌套的路由记录。</p><hr><h3 id="Properties-components" tabindex="-1">components <a class="header-anchor" href="#Properties-components" aria-label="Permalink to &quot;components %{#Properties-components}%&quot;">​</a></h3><p>• <strong>components</strong>: <code>undefined</code> | <code>null</code> | <code>Record</code>&lt;<code>string</code>, <code>RawRouteComponent</code>&gt;</p><p>当 URL 匹配到该路由时显示的组件。允许使用命名视图。</p><hr><h3 id="Properties-instances" tabindex="-1">instances <a class="header-anchor" href="#Properties-instances" aria-label="Permalink to &quot;instances %{#Properties-instances}%&quot;">​</a></h3><p>• <strong>instances</strong>: <code>Record</code>&lt;<code>string</code>, <code>undefined</code> | <code>null</code> | <code>ComponentPublicInstance</code>&gt;</p><p>挂载的路由组件实例。 在记录上存在实例意味着，当有多个应用实例渲染相同的视图时，beforeRouteUpdate 和 beforeRouteLeave 守卫只能被最后挂载的应用实例调用。这样的渲染基本上只会对页面内容进行复制，在实际情况下并不应该发生。它可以在多个应用渲染不同的命名视图时工作。</p><hr><h3 id="Properties-meta" tabindex="-1">meta <a class="header-anchor" href="#Properties-meta" aria-label="Permalink to &quot;meta %{#Properties-meta}%&quot;">​</a></h3><p>• <strong>meta</strong>: <a href="./RouteMeta.html"><code>RouteMeta</code></a></p><p>附加在记录上的任意数据。</p><hr><h3 id="Properties-name" tabindex="-1">name <a class="header-anchor" href="#Properties-name" aria-label="Permalink to &quot;name %{#Properties-name}%&quot;">​</a></h3><p>• <strong>name</strong>: <code>undefined</code> | <a href="./../#routerecordname"><code>RouteRecordName</code></a></p><p>路由记录的名称。必须唯一。</p><hr><h3 id="Properties-path" tabindex="-1">path <a class="header-anchor" href="#Properties-path" aria-label="Permalink to &quot;path %{#Properties-path}%&quot;">​</a></h3><p>• <strong>path</strong>: <code>string</code></p><p>记录的路径。应该以 <code>/</code> 开头，除非该记录为另一条记录的子记录。</p><hr><h3 id="Properties-props" tabindex="-1">props <a class="header-anchor" href="#Properties-props" aria-label="Permalink to &quot;props %{#Properties-props}%&quot;">​</a></h3><p>• <strong>props</strong>: <code>Record</code>&lt;<code>string</code>, <code>_RouteRecordProps</code>&gt;</p><p>允许将参数作为 props 传递给由 <code>router-view</code> 渲染的组件。应是一个具有与 <code>components</code> 相同键的对象，或是一个应用于所有组件的布尔值。</p><hr><h3 id="Properties-redirect" tabindex="-1">redirect <a class="header-anchor" href="#Properties-redirect" aria-label="Permalink to &quot;redirect %{#Properties-redirect}%&quot;">​</a></h3><p>• <strong>redirect</strong>: <code>undefined</code> | <code>RouteRecordRedirectOption</code></p><p>路由直接匹配时重定向的位置。重定向发生在任何导航守卫和带有新目标位置的新导航触发之前。</p>',45)]))}const m=o(d,[["render",i]]);export{u as __pageData,m as default};
