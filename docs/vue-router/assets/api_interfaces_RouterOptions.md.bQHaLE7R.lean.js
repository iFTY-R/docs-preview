import{_ as a,c as t,a2 as i,o as s}from"./chunks/framework.XosO8Wyc.js";const u=JSON.parse('{"title":"Interface: RouterOptions","description":"","frontmatter":{"editLink":false},"headers":[],"relativePath":"api/interfaces/RouterOptions.md","filePath":"api/interfaces/RouterOptions.md"}'),o={name:"api/interfaces/RouterOptions.md"};function r(n,e,l,h,p,c){return s(),t("div",null,e[0]||(e[0]=[i(`<p><a href="./../"><strong>API Documentation</strong></a> • <strong>Docs</strong></p><hr><p><a href="./../">API Documentation</a> / RouterOptions</p><h1 id="Interface-RouterOptions" tabindex="-1">Interface: RouterOptions <a class="header-anchor" href="#Interface-RouterOptions" aria-label="Permalink to &quot;Interface: RouterOptions&quot;">​</a></h1><p>Options to initialize a <a href="./Router.html">Router</a> instance.</p><h2 id="Extends" tabindex="-1">Extends <a class="header-anchor" href="#Extends" aria-label="Permalink to &quot;Extends&quot;">​</a></h2><ul><li><a href="./../type-aliases/PathParserOptions.html"><code>PathParserOptions</code></a></li></ul><h2 id="Properties" tabindex="-1">Properties <a class="header-anchor" href="#Properties" aria-label="Permalink to &quot;Properties&quot;">​</a></h2><h3 id="end-" tabindex="-1">end? <a class="header-anchor" href="#end-" aria-label="Permalink to &quot;end?&quot;">​</a></h3><blockquote><p><code>optional</code> <strong>end</strong>: <code>boolean</code></p></blockquote><p>Should the RegExp match until the end by appending a <code>$</code> to it.</p><h4 id="Default-Value" tabindex="-1">Default Value <a class="header-anchor" href="#Default-Value" aria-label="Permalink to &quot;Default Value&quot;">​</a></h4><p><code>true</code></p><h4 id="Inherited-from" tabindex="-1">Inherited from <a class="header-anchor" href="#Inherited-from" aria-label="Permalink to &quot;Inherited from&quot;">​</a></h4><p><code>PathParserOptions.end</code></p><hr><h3 id="history" tabindex="-1">history <a class="header-anchor" href="#history" aria-label="Permalink to &quot;history&quot;">​</a></h3><blockquote><p><strong>history</strong>: <a href="./RouterHistory.html"><code>RouterHistory</code></a></p></blockquote><p>History implementation used by the router. Most web applications should use <code>createWebHistory</code> but it requires the server to be properly configured. You can also use a <em>hash</em> based history with <code>createWebHashHistory</code> that does not require any configuration on the server but isn&#39;t handled at all by search engines and does poorly on SEO.</p><h4 id="Example" tabindex="-1">Example <a class="header-anchor" href="#Example" aria-label="Permalink to &quot;Example&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes one-dark-pro github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#6F42C1;">createRouter</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;">({</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#24292E;">  history</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;">: </span><span style="--shiki-dark:#61AFEF;--shiki-light:#6F42C1;">createWebHistory</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;">(),</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#6A737D;--shiki-light-font-style:inherit;">  // other options...</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;">})</span></span></code></pre></div><hr><h3 id="linkActiveClass-" tabindex="-1">linkActiveClass? <a class="header-anchor" href="#linkActiveClass-" aria-label="Permalink to &quot;linkActiveClass?&quot;">​</a></h3><blockquote><p><code>optional</code> <strong>linkActiveClass</strong>: <code>string</code></p></blockquote><p>Default class applied to active <a href="./../variables/RouterLink.html">RouterLink</a>. If none is provided, <code>router-link-active</code> will be applied.</p><hr><h3 id="linkExactActiveClass-" tabindex="-1">linkExactActiveClass? <a class="header-anchor" href="#linkExactActiveClass-" aria-label="Permalink to &quot;linkExactActiveClass?&quot;">​</a></h3><blockquote><p><code>optional</code> <strong>linkExactActiveClass</strong>: <code>string</code></p></blockquote><p>Default class applied to exact active <a href="./../variables/RouterLink.html">RouterLink</a>. If none is provided, <code>router-link-exact-active</code> will be applied.</p><hr><h3 id="parseQuery-" tabindex="-1">parseQuery()? <a class="header-anchor" href="#parseQuery-" aria-label="Permalink to &quot;parseQuery()?&quot;">​</a></h3><blockquote><p><code>optional</code> <strong>parseQuery</strong>: (<code>search</code>) =&gt; <a href="./../type-aliases/LocationQuery.html"><code>LocationQuery</code></a></p></blockquote><p>Custom implementation to parse a query. See its counterpart, <a href="./RouterOptions.html#stringifyQuery">RouterOptions.stringifyQuery</a>.</p><p><strong><code>Internal</code></strong></p><p>Transforms a queryString into a <a href="./../type-aliases/LocationQuery.html">LocationQuery</a> object. Accept both, a version with the leading <code>?</code> and without Should work as URLSearchParams</p><h4 id="Parameters" tabindex="-1">Parameters <a class="header-anchor" href="#Parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><p>• <strong>search</strong>: <code>string</code></p><p>search string to parse</p><h4 id="Returns" tabindex="-1">Returns <a class="header-anchor" href="#Returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./../type-aliases/LocationQuery.html"><code>LocationQuery</code></a></p><p>a query object</p><h4 id="Example-1" tabindex="-1">Example <a class="header-anchor" href="#Example-1" aria-label="Permalink to &quot;Example&quot;">​</a></h4><p>Let&#39;s say you want to use the <a href="https://github.com/ljharb/qs" target="_blank" rel="noreferrer">qs package</a> to parse queries, you can provide both <code>parseQuery</code> and <code>stringifyQuery</code>:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes one-dark-pro github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#D73A49;">import</span><span style="--shiki-dark:#E06C75;--shiki-light:#24292E;"> qs</span><span style="--shiki-dark:#C678DD;--shiki-light:#D73A49;"> from</span><span style="--shiki-dark:#98C379;--shiki-light:#032F62;"> &#39;qs&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#6F42C1;">createRouter</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;">({</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#6A737D;--shiki-light-font-style:inherit;">  // other options...</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#24292E;">  parseQuery</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;">: </span><span style="--shiki-dark:#E5C07B;--shiki-light:#24292E;">qs</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;">.</span><span style="--shiki-dark:#E06C75;--shiki-light:#24292E;">parse</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;">,</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#24292E;">  stringifyQuery</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;">: </span><span style="--shiki-dark:#E5C07B;--shiki-light:#24292E;">qs</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;">.</span><span style="--shiki-dark:#E06C75;--shiki-light:#24292E;">stringify</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;">,</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;">})</span></span></code></pre></div><hr><h3 id="routes" tabindex="-1">routes <a class="header-anchor" href="#routes" aria-label="Permalink to &quot;routes&quot;">​</a></h3><blockquote><p><strong>routes</strong>: readonly <a href="./../type-aliases/RouteRecordRaw.html"><code>RouteRecordRaw</code></a>[]</p></blockquote><p>Initial list of routes that should be added to the router.</p><hr><h3 id="scrollBehavior-" tabindex="-1">scrollBehavior? <a class="header-anchor" href="#scrollBehavior-" aria-label="Permalink to &quot;scrollBehavior?&quot;">​</a></h3><blockquote><p><code>optional</code> <strong>scrollBehavior</strong>: <a href="./RouterScrollBehavior.html"><code>RouterScrollBehavior</code></a></p></blockquote><p>Function to control scrolling when navigating between pages. Can return a Promise to delay scrolling. Check ScrollBehavior.</p><h4 id="Example-2" tabindex="-1">Example <a class="header-anchor" href="#Example-2" aria-label="Permalink to &quot;Example&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes one-dark-pro github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#D73A49;">function</span><span style="--shiki-dark:#61AFEF;--shiki-light:#6F42C1;"> scrollBehavior</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;">(</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#E36209;--shiki-light-font-style:inherit;">to</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;">, </span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#E36209;--shiki-light-font-style:inherit;">from</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;">, </span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#E36209;--shiki-light-font-style:inherit;">savedPosition</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;">) {</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#6A737D;--shiki-light-font-style:inherit;">  // \`to\` and \`from\` are both route locations</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#6A737D;--shiki-light-font-style:inherit;">  // \`savedPosition\` can be null if there isn&#39;t one</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;">}</span></span></code></pre></div><hr><h3 id="sensitive-" tabindex="-1">sensitive? <a class="header-anchor" href="#sensitive-" aria-label="Permalink to &quot;sensitive?&quot;">​</a></h3><blockquote><p><code>optional</code> <strong>sensitive</strong>: <code>boolean</code></p></blockquote><p>Makes the RegExp case-sensitive.</p><h4 id="Default-Value-1" tabindex="-1">Default Value <a class="header-anchor" href="#Default-Value-1" aria-label="Permalink to &quot;Default Value&quot;">​</a></h4><p><code>false</code></p><h4 id="Inherited-from-1" tabindex="-1">Inherited from <a class="header-anchor" href="#Inherited-from-1" aria-label="Permalink to &quot;Inherited from&quot;">​</a></h4><p><code>PathParserOptions.sensitive</code></p><hr><h3 id="strict-" tabindex="-1">strict? <a class="header-anchor" href="#strict-" aria-label="Permalink to &quot;strict?&quot;">​</a></h3><blockquote><p><code>optional</code> <strong>strict</strong>: <code>boolean</code></p></blockquote><p>Whether to disallow a trailing slash or not.</p><h4 id="Default-Value-2" tabindex="-1">Default Value <a class="header-anchor" href="#Default-Value-2" aria-label="Permalink to &quot;Default Value&quot;">​</a></h4><p><code>false</code></p><h4 id="Inherited-from-2" tabindex="-1">Inherited from <a class="header-anchor" href="#Inherited-from-2" aria-label="Permalink to &quot;Inherited from&quot;">​</a></h4><p><code>PathParserOptions.strict</code></p><hr><h3 id="stringifyQuery-" tabindex="-1">stringifyQuery()? <a class="header-anchor" href="#stringifyQuery-" aria-label="Permalink to &quot;stringifyQuery()?&quot;">​</a></h3><blockquote><p><code>optional</code> <strong>stringifyQuery</strong>: (<code>query</code>) =&gt; <code>string</code></p></blockquote><p>Custom implementation to stringify a query object. Should not prepend a leading <code>?</code>. <a href="./RouterOptions.html#parseQuery">parseQuery</a> counterpart to handle query parsing.</p><p><strong><code>Internal</code></strong></p><p>Stringifies a <a href="./../type-aliases/LocationQueryRaw.html">LocationQueryRaw</a> object. Like <code>URLSearchParams</code>, it doesn&#39;t prepend a <code>?</code></p><h4 id="Parameters-1" tabindex="-1">Parameters <a class="header-anchor" href="#Parameters-1" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><p>• <strong>query</strong>: <a href="./../type-aliases/LocationQueryRaw.html"><code>LocationQueryRaw</code></a></p><p>query object to stringify</p><h4 id="Returns-1" tabindex="-1">Returns <a class="header-anchor" href="#Returns-1" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>string</code></p><p>string version of the query without the leading <code>?</code></p>`,82)]))}const k=a(o,[["render",r]]);export{u as __pageData,k as default};
