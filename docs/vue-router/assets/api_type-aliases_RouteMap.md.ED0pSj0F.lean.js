import{_ as t,c as a,a2 as o,o as p}from"./chunks/framework.XosO8Wyc.js";const f=JSON.parse('{"title":"Type Alias: RouteMap","description":"","frontmatter":{"editLink":false},"headers":[],"relativePath":"api/type-aliases/RouteMap.md","filePath":"api/type-aliases/RouteMap.md"}'),i={name:"api/type-aliases/RouteMap.md"};function r(s,e,n,c,d,u){return p(),a("div",null,e[0]||(e[0]=[o('<p><a href="./../"><strong>API Documentation</strong></a> • <strong>Docs</strong></p><hr><p><a href="./../">API Documentation</a> / RouteMap</p><h1 id="Type-Alias-RouteMap" tabindex="-1">Type Alias: RouteMap <a class="header-anchor" href="#Type-Alias-RouteMap" aria-label="Permalink to &quot;Type Alias: RouteMap&quot;">​</a></h1><blockquote><p><strong>RouteMap</strong>: <a href="./../interfaces/TypesConfig.html"><code>TypesConfig</code></a> <em>extends</em> <code>Record</code>&lt;<code>&quot;RouteNamedMap&quot;</code>, infer RouteNamedMap&gt; ? <code>RouteNamedMap</code> : <a href="./RouteMapGeneric.html"><code>RouteMapGeneric</code></a></p></blockquote><p>Convenience type to get the typed RouteMap or a generic one if not provided. It is extracted from the <a href="./../interfaces/TypesConfig.html">TypesConfig</a> if it exists, it becomes <a href="./RouteMapGeneric.html">RouteMapGeneric</a> otherwise.</p>',6)]))}const m=t(i,[["render",r]]);export{f as __pageData,m as default};
