import{_ as o,c as t,a2 as a,o as r}from"./chunks/framework.XosO8Wyc.js";const h=JSON.parse('{"title":"Interface: _RouterLinkI","description":"","frontmatter":{"editLink":false},"headers":[],"relativePath":"api/interfaces/RouterLinkI.md","filePath":"api/interfaces/RouterLinkI.md"}'),n={name:"api/interfaces/RouterLinkI.md"};function s(d,e,c,i,l,u){return r(),t("div",null,e[0]||(e[0]=[a('<p><a href="./../"><strong>API Documentation</strong></a> • <strong>Docs</strong></p><hr><p><a href="./../">API Documentation</a> / _RouterLinkI</p><h1 id="Interface-RouterLinkI" tabindex="-1">Interface: _RouterLinkI <a class="header-anchor" href="#Interface-RouterLinkI" aria-label="Permalink to &quot;Interface: \\_RouterLinkI&quot;">​</a></h1><p><strong><code>Internal</code></strong></p><p>Typed version of the <code>RouterLink</code> component. Its generic defaults to the typed router, so it can be inferred automatically for JSX.</p><h2 id="Constructors" tabindex="-1">Constructors <a class="header-anchor" href="#Constructors" aria-label="Permalink to &quot;Constructors&quot;">​</a></h2><h3 id="new-RouterLinkI-" tabindex="-1">new _RouterLinkI() <a class="header-anchor" href="#new-RouterLinkI-" aria-label="Permalink to &quot;new \\_RouterLinkI()&quot;">​</a></h3><blockquote><p><strong>new _RouterLinkI</strong>(): <code>object</code></p></blockquote><h4 id="Returns" tabindex="-1">Returns <a class="header-anchor" href="#Returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>object</code></p><h5 id="-props" tabindex="-1">$props <a class="header-anchor" href="#-props" aria-label="Permalink to &quot;$props&quot;">​</a></h5><blockquote><p><strong>$props</strong>: <code>AllowedComponentProps</code> &amp; <code>ComponentCustomProps</code> &amp; <code>VNodeProps</code> &amp; <a href="./RouterLinkProps.html"><code>RouterLinkProps</code></a></p></blockquote><h5 id="-slots" tabindex="-1">$slots <a class="header-anchor" href="#-slots" aria-label="Permalink to &quot;$slots&quot;">​</a></h5><blockquote><p><strong>$slots</strong>: <code>object</code></p></blockquote><h5 id="-slots-default-" tabindex="-1">$slots.default()? <a class="header-anchor" href="#-slots-default-" aria-label="Permalink to &quot;$slots.default()?&quot;">​</a></h5><blockquote><p><code>optional</code> <strong>default</strong>: (<code>__namedParameters</code>) =&gt; <code>VNode</code>&lt;<code>RendererNode</code>, <code>RendererElement</code>, <code>object</code>&gt;[]</p></blockquote><h6 id="Parameters" tabindex="-1">Parameters <a class="header-anchor" href="#Parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h6><p>• <strong>__namedParameters</strong></p><p>• <strong>__namedParameters.href</strong>: <code>string</code></p><p>• <strong>__namedParameters.isActive</strong>: <code>boolean</code></p><p>• <strong>__namedParameters.isExactActive</strong>: <code>boolean</code></p><p>• <strong>__namedParameters.route</strong>: <a href="./RouteLocationResolvedGeneric.html"><code>RouteLocationResolvedGeneric</code></a></p><p>• <strong>__namedParameters.navigate</strong></p><h6 id="Returns-1" tabindex="-1">Returns <a class="header-anchor" href="#Returns-1" aria-label="Permalink to &quot;Returns&quot;">​</a></h6><p><code>VNode</code>&lt;<code>RendererNode</code>, <code>RendererElement</code>, <code>object</code>&gt;[]</p><h2 id="Properties" tabindex="-1">Properties <a class="header-anchor" href="#Properties" aria-label="Permalink to &quot;Properties&quot;">​</a></h2><h3 id="useLink-" tabindex="-1">useLink() <a class="header-anchor" href="#useLink-" aria-label="Permalink to &quot;useLink()&quot;">​</a></h3><blockquote><p><strong>useLink</strong>: &lt;<code>Name</code>&gt;(<code>props</code>) =&gt; <a href="./UseLinkReturn.html"><code>UseLinkReturn</code></a>&lt;<code>Name</code>&gt;</p></blockquote><p><strong><code>Internal</code></strong></p><p>Access to <code>useLink()</code> without depending on using vue-router</p><p>Returns the internal behavior of a <a href="./../variables/RouterLink.html">RouterLink</a> without the rendering part.</p><h4 id="Type-Parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#Type-Parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h4><p>• <strong>Name</strong> <em>extends</em> <code>string</code> | <code>symbol</code> = <code>string</code> | <code>symbol</code></p><h4 id="Parameters-1" tabindex="-1">Parameters <a class="header-anchor" href="#Parameters-1" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><p>• <strong>props</strong>: <a href="./UseLinkOptions.html"><code>UseLinkOptions</code></a>&lt;<code>Name</code>&gt;</p><p>a <code>to</code> location and an optional <code>replace</code> flag</p><h4 id="Returns-2" tabindex="-1">Returns <a class="header-anchor" href="#Returns-2" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./UseLinkReturn.html"><code>UseLinkReturn</code></a>&lt;<code>Name</code>&gt;</p>',39)]))}const m=o(n,[["render",s]]);export{h as __pageData,m as default};
