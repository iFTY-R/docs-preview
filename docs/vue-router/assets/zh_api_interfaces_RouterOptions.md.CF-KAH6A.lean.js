import{_ as i,c as s,a2 as t,o as a}from"./chunks/framework.XosO8Wyc.js";const k=JSON.parse('{"title":"接口：RouterOptions","description":"","frontmatter":{"editLink":false},"headers":[],"relativePath":"zh/api/interfaces/RouterOptions.md","filePath":"zh/api/interfaces/RouterOptions.md"}'),r={name:"zh/api/interfaces/RouterOptions.md"};function o(n,e,l,h,p,d){return a(),s("div",null,e[0]||(e[0]=[t(`<p><a href="./../">API 参考</a> / RouterOptions</p><h1 id="interface-routeroptions" tabindex="-1">接口：RouterOptions <a class="header-anchor" href="#interface-routeroptions" aria-label="Permalink to &quot;接口：RouterOptions %{#interface-routeroptions}%&quot;">​</a></h1><p>用来初始化一个 <a href="./Router.html">Router</a> 实例的选项。</p><h2 id="Hierarchy" tabindex="-1">继承关系 <a class="header-anchor" href="#Hierarchy" aria-label="Permalink to &quot;继承关系 %{#Hierarchy}%&quot;">​</a></h2><ul><li><p><a href="./../#pathparseroptions"><code>PathParserOptions</code></a></p><p>↳ <strong><code>RouterOptions</code></strong></p></li></ul><h2 id="Properties" tabindex="-1">属性 <a class="header-anchor" href="#Properties" aria-label="Permalink to &quot;属性 %{#Properties}%&quot;">​</a></h2><h3 id="Properties-end" tabindex="-1">end <a class="header-anchor" href="#Properties-end" aria-label="Permalink to &quot;end %{#Properties-end}%&quot;">​</a></h3><p>• <code>可选</code> <strong>end</strong>: <code>boolean</code></p><p>其 RegExp 是否应该在末尾加一个 <code>$</code> 以匹配到末尾。</p><p><strong><code>默认值</code></strong></p><p><code>true</code></p><h4 id="Properties-end-Inherited-from" tabindex="-1">继承自 <a class="header-anchor" href="#Properties-end-Inherited-from" aria-label="Permalink to &quot;继承自 %{#Properties-end-Inherited-from}%&quot;">​</a></h4><p>PathParserOptions.end</p><hr><h3 id="Properties-history" tabindex="-1">history <a class="header-anchor" href="#Properties-history" aria-label="Permalink to &quot;history %{#Properties-history}%&quot;">​</a></h3><p>• <strong>history</strong>: <a href="./RouterHistory.html"><code>RouterHistory</code></a></p><p>路由器使用的历史记录模式。大多数应用应该使用 <code>createWebHistory</code>，但这需要正确配置服务器。你也可以使用 <code>createWebHashHistory</code> 来实现基于 <em>hash</em> 的历史记录，无需配置服务器。但这种方式不会被搜索引擎处理，SEO 的效果较差。</p><p><strong><code>示例</code></strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes one-dark-pro github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#6F42C1;">createRouter</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;">({</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#24292E;">  history</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;">: </span><span style="--shiki-dark:#61AFEF;--shiki-light:#6F42C1;">createWebHistory</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;">(),</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#6A737D;--shiki-light-font-style:inherit;">  // 其它选项...</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;">})</span></span></code></pre></div><hr><h3 id="Properties-linkActiveClass" tabindex="-1">linkActiveClass <a class="header-anchor" href="#Properties-linkActiveClass" aria-label="Permalink to &quot;linkActiveClass %{#Properties-linkActiveClass}%&quot;">​</a></h3><p>• <code>可选</code> <strong>linkActiveClass</strong>: <code>string</code></p><p>匹配当前路由的 <a href="./../#routerlink">RouterLink</a> 默认的 CSS class。如果没有提供，则会使用 <code>router-link-active</code>。</p><hr><h3 id="Properties-linkExactActiveClass" tabindex="-1">linkExactActiveClass <a class="header-anchor" href="#Properties-linkExactActiveClass" aria-label="Permalink to &quot;linkExactActiveClass %{#Properties-linkExactActiveClass}%&quot;">​</a></h3><p>• <code>可选</code> <strong>linkExactActiveClass</strong>: <code>string</code></p><p>严格匹配当前路由的 <a href="./../#routerlink">RouterLink</a> 默认的 CSS class。如果没有提供，则会使用 <code>router-link-exact-active</code>。</p><hr><h3 id="Properties-parseQuery" tabindex="-1">parseQuery <a class="header-anchor" href="#Properties-parseQuery" aria-label="Permalink to &quot;parseQuery %{#Properties-parseQuery}%&quot;">​</a></h3><p>• <code>可选</code> <strong>parseQuery</strong>: (<code>search</code>: <code>string</code>) =&gt; <a href="./../#locationquery"><code>LocationQuery</code></a></p><h4 id="Properties-parseQuery-Type-declaration" tabindex="-1">类型声明 <a class="header-anchor" href="#Properties-parseQuery-Type-declaration" aria-label="Permalink to &quot;类型声明 %{#Properties-parseQuery-Type-declaration}%&quot;">​</a></h4><p>▸ (<code>search</code>): <a href="./../#locationquery"><code>LocationQuery</code></a></p><p>解析查询的自定义实现。请查阅其相关内容 <a href="./RouterOptions.html#stringifyquery">RouterOptions.stringifyQuery</a>。</p><h5 id="Properties-parseQuery-Type-declaration-Parameters" tabindex="-1">参数 <a class="header-anchor" href="#Properties-parseQuery-Type-declaration-Parameters" aria-label="Permalink to &quot;参数 %{#Properties-parseQuery-Type-declaration-Parameters}%&quot;">​</a></h5><table tabindex="0"><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th></tr></thead><tbody><tr><td style="text-align:left;"><code>search</code></td><td style="text-align:left;"><code>string</code></td></tr></tbody></table><h5 id="Properties-parseQuery-Type-declaration-Returns" tabindex="-1">返回值 <a class="header-anchor" href="#Properties-parseQuery-Type-declaration-Returns" aria-label="Permalink to &quot;返回值 %{#Properties-parseQuery-Type-declaration-Returns}%&quot;">​</a></h5><p><a href="./../#locationquery"><code>LocationQuery</code></a></p><p><strong><code>示例</code></strong></p><p>假设你想使用 <a href="https://github.com/ljharb/qs" target="_blank" rel="noreferrer">qs 包</a> 来解析查询，那么你可以同时提供 <code>parseQuery</code> 和 <code>stringifyQuery</code>：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes one-dark-pro github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#D73A49;">import</span><span style="--shiki-dark:#E06C75;--shiki-light:#24292E;"> qs</span><span style="--shiki-dark:#C678DD;--shiki-light:#D73A49;"> from</span><span style="--shiki-dark:#98C379;--shiki-light:#032F62;"> &#39;qs&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#6F42C1;">createRouter</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;">({</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#6A737D;--shiki-light-font-style:inherit;">  // 其它选项...</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#24292E;">  parseQuery</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;">: </span><span style="--shiki-dark:#E5C07B;--shiki-light:#24292E;">qs</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;">.</span><span style="--shiki-dark:#E06C75;--shiki-light:#24292E;">parse</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;">,</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#24292E;">  stringifyQuery</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;">: </span><span style="--shiki-dark:#E5C07B;--shiki-light:#24292E;">qs</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;">.</span><span style="--shiki-dark:#E06C75;--shiki-light:#24292E;">stringify</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;">,</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;">})</span></span></code></pre></div><hr><h3 id="Properties-routes" tabindex="-1">routes <a class="header-anchor" href="#Properties-routes" aria-label="Permalink to &quot;routes %{#Properties-routes}%&quot;">​</a></h3><p>• <strong>routes</strong>: 只读 <a href="./../#routerecordraw"><code>RouteRecordRaw</code></a>[]</p><p>应该添加到路由器的初始路由列表。</p><hr><h3 id="Properties-scrollBehavior" tabindex="-1">scrollBehavior <a class="header-anchor" href="#Properties-scrollBehavior" aria-label="Permalink to &quot;scrollBehavior %{#Properties-scrollBehavior}%&quot;">​</a></h3><p>• <code>可选</code> <strong>scrollBehavior</strong>: <a href="./RouterScrollBehavior.html"><code>RouterScrollBehavior</code></a></p><p>当在页面之间导航时控制滚动的功能。可以返回一个 Promise 来延迟滚动。相关内容请查阅 ScrollBehavior。</p><p><strong><code>示例</code></strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes one-dark-pro github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#D73A49;">function</span><span style="--shiki-dark:#61AFEF;--shiki-light:#6F42C1;"> scrollBehavior</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;">(</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#E36209;--shiki-light-font-style:inherit;">to</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;">, </span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#E36209;--shiki-light-font-style:inherit;">from</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;">, </span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#E36209;--shiki-light-font-style:inherit;">savedPosition</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;">) {</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#6A737D;--shiki-light-font-style:inherit;">  // \`to\` 和 \`from\` 都是路由路径</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#6A737D;--shiki-light-font-style:inherit;">  // \`savedPosition\` 如果不存在可以为 null</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;">}</span></span></code></pre></div><hr><h3 id="Properties-sensitive" tabindex="-1">sensitive <a class="header-anchor" href="#Properties-sensitive" aria-label="Permalink to &quot;sensitive %{#Properties-sensitive}%&quot;">​</a></h3><p>• <code>可选</code> <strong>sensitive</strong>: <code>boolean</code></p><p>使该 RegExp 区分大小写。</p><p><strong><code>默认值</code></strong></p><p><code>false</code></p><h4 id="Properties-sensitive-Inherited-from" tabindex="-1">继承自 <a class="header-anchor" href="#Properties-sensitive-Inherited-from" aria-label="Permalink to &quot;继承自 %{#Properties-sensitive-Inherited-from}%&quot;">​</a></h4><p>PathParserOptions.sensitive</p><hr><h3 id="Properties-strict" tabindex="-1">strict <a class="header-anchor" href="#Properties-strict" aria-label="Permalink to &quot;strict %{#Properties-strict}%&quot;">​</a></h3><p>• <code>可选</code> <strong>strict</strong>: <code>boolean</code></p><p>是否禁止尾部斜线。</p><p><strong><code>默认值</code></strong></p><p><code>false</code></p><h4 id="Properties-strict-Inherited-from" tabindex="-1">继承自 <a class="header-anchor" href="#Properties-strict-Inherited-from" aria-label="Permalink to &quot;继承自 %{#Properties-strict-Inherited-from}%&quot;">​</a></h4><p>PathParserOptions.strict</p><hr><h3 id="Properties-stringifyQuery" tabindex="-1">stringifyQuery <a class="header-anchor" href="#Properties-stringifyQuery" aria-label="Permalink to &quot;stringifyQuery %{#Properties-stringifyQuery}%&quot;">​</a></h3><p>• <code>可选</code> <strong>stringifyQuery</strong>: (<code>query</code>: <a href="./../#locationqueryraw"><code>LocationQueryRaw</code></a>) =&gt; <code>string</code></p><h4 id="Properties-stringifyQuery-Type-declaration" tabindex="-1">类型声明 <a class="header-anchor" href="#Properties-stringifyQuery-Type-declaration" aria-label="Permalink to &quot;类型声明 %{#Properties-stringifyQuery-Type-declaration}%&quot;">​</a></h4><p>▸ (<code>query</code>): <code>string</code></p><p>对查询对象进行字符串化的自定义实现。该实现不应该前置 <code>?</code>。<a href="./RouterOptions.html#parsequery">parseQuery</a> 对应处理查询解析。</p><h5 id="Properties-stringifyQuery-Type-declaration-Parameters" tabindex="-1">Parameters <a class="header-anchor" href="#Properties-stringifyQuery-Type-declaration-Parameters" aria-label="Permalink to &quot;Parameters %{#Properties-stringifyQuery-Type-declaration-Parameters}%&quot;">​</a></h5><table tabindex="0"><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th></tr></thead><tbody><tr><td style="text-align:left;"><code>query</code></td><td style="text-align:left;"><a href="./../#locationqueryraw"><code>LocationQueryRaw</code></a></td></tr></tbody></table><h5 id="Properties-stringifyQuery-Type-declaration-Returns" tabindex="-1">返回值 <a class="header-anchor" href="#Properties-stringifyQuery-Type-declaration-Returns" aria-label="Permalink to &quot;返回值 %{#Properties-stringifyQuery-Type-declaration-Returns}%&quot;">​</a></h5><p><code>string</code></p>`,76)]))}const y=i(r,[["render",o]]);export{k as __pageData,y as default};
