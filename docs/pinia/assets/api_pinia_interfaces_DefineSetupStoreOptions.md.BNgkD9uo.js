import{_ as t,c as a,o as i,a2 as s}from"./chunks/framework.DMet4H9D.js";const S=JSON.parse('{"title":"DefineSetupStoreOptions<Id, S, G, A>","description":"","frontmatter":{"editLink":false},"headers":[],"relativePath":"api/pinia/interfaces/DefineSetupStoreOptions.md","filePath":"api/pinia/interfaces/DefineSetupStoreOptions.md"}'),o={name:"api/pinia/interfaces/DefineSetupStoreOptions.md"};function n(r,e,p,d,l,h){return i(),a("div",null,e[0]||(e[0]=[s('<p><a href="./../../">@pinia/root</a> / <a href="./../">pinia</a> / DefineSetupStoreOptions</p><h1 id="DefineSetupStoreOptions-Id-S-G-A-" tabindex="-1">DefineSetupStoreOptions&lt;Id, S, G, A&gt; <a class="header-anchor" href="#DefineSetupStoreOptions-Id-S-G-A-" aria-label="Permalink to &quot;DefineSetupStoreOptions\\&lt;Id, S, G, A\\&gt;&quot;">​</a></h1><p>Options parameter of <code>defineStore()</code> for setup stores. Can be extended to augment stores with the plugin API.</p><h2 id="See" tabindex="-1">See <a class="header-anchor" href="#See" aria-label="Permalink to &quot;See&quot;">​</a></h2><p><a href="./DefineStoreOptionsBase.html">DefineStoreOptionsBase</a>.</p><h2 id="Extends" tabindex="-1">Extends <a class="header-anchor" href="#Extends" aria-label="Permalink to &quot;Extends&quot;">​</a></h2><ul><li><a href="./DefineStoreOptionsBase.html"><code>DefineStoreOptionsBase</code></a>&lt;<code>S</code>, <a href="./../type-aliases/Store.html"><code>Store</code></a>&lt;<code>Id</code>, <code>S</code>, <code>G</code>, <code>A</code>&gt;&gt;</li></ul><h2 id="Type-Parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#Type-Parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h2><p>• <strong>Id</strong> <em>extends</em> <code>string</code></p><p>• <strong>S</strong> <em>extends</em> <a href="./../type-aliases/StateTree.html"><code>StateTree</code></a></p><p>• <strong>G</strong></p><p>• <strong>A</strong></p><h2 id="Properties" tabindex="-1">Properties <a class="header-anchor" href="#Properties" aria-label="Permalink to &quot;Properties&quot;">​</a></h2><h3 id="actions-" tabindex="-1">actions? <a class="header-anchor" href="#actions-" aria-label="Permalink to &quot;actions?&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes dracula-soft vitesse-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#F6F6F4;--shiki-light:#B07D48;">optional</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#59873A;"> actions</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">:</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#B07D48;"> A</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">;</span></span></code></pre></div><p>Extracted actions. Added by useStore(). SHOULD NOT be added by the user when creating the store. Can be used in plugins to get the list of actions in a store defined with a setup function. Note this is always defined</p>',16)]))}const f=t(o,[["render",n]]);export{S as __pageData,f as default};
