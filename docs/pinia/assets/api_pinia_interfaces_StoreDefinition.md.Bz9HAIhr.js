import{_ as i,c as t,o as a,a2 as s}from"./chunks/framework.DMet4H9D.js";const k=JSON.parse('{"title":"StoreDefinition()<Id, S, G, A>","description":"","frontmatter":{"editLink":false},"headers":[],"relativePath":"api/pinia/interfaces/StoreDefinition.md","filePath":"api/pinia/interfaces/StoreDefinition.md"}'),n={name:"api/pinia/interfaces/StoreDefinition.md"};function r(o,e,h,l,d,p){return a(),t("div",null,e[0]||(e[0]=[s('<p><a href="./../../">@pinia/root</a> / <a href="./../">pinia</a> / StoreDefinition</p><h1 id="StoreDefinition-Id-S-G-A-" tabindex="-1">StoreDefinition()&lt;Id, S, G, A&gt; <a class="header-anchor" href="#StoreDefinition-Id-S-G-A-" aria-label="Permalink to &quot;StoreDefinition()\\&lt;Id, S, G, A\\&gt;&quot;">​</a></h1><p>Return type of <code>defineStore()</code>. Function that allows instantiating a store.</p><h2 id="Extended-by" tabindex="-1">Extended by <a class="header-anchor" href="#Extended-by" aria-label="Permalink to &quot;Extended by&quot;">​</a></h2><ul><li><a href="./SetupStoreDefinition.html"><code>SetupStoreDefinition</code></a></li></ul><h2 id="Type-Parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#Type-Parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h2><p>• <strong>Id</strong> <em>extends</em> <code>string</code> = <code>string</code></p><p>• <strong>S</strong> <em>extends</em> <a href="./../type-aliases/StateTree.html"><code>StateTree</code></a> = <a href="./../type-aliases/StateTree.html"><code>StateTree</code></a></p><p>• <strong>G</strong> = <a href="./../type-aliases/GettersTree.html"><code>_GettersTree</code></a>&lt;<code>S</code>&gt;</p><p>• <strong>A</strong> = <a href="./../type-aliases/ActionsTree.html"><code>_ActionsTree</code></a></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes dracula-soft vitesse-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#F286C4;--shiki-light:#AB5959;">interface</span><span style="--shiki-dark:#97E1F1;--shiki-dark-font-style:italic;--shiki-light:#2E8F82;--shiki-light-font-style:inherit;"> StoreDefinition</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#393A34;">(</span><span style="--shiki-dark:#97E1F1;--shiki-dark-font-style:italic;--shiki-light:#2E8F82;--shiki-light-font-style:inherit;">pinia</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#393A34;">?, </span><span style="--shiki-dark:#97E1F1;--shiki-dark-font-style:italic;--shiki-light:#2E8F82;--shiki-light-font-style:inherit;">hot</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#393A34;">?): </span><span style="--shiki-dark:#97E1F1;--shiki-dark-font-style:italic;--shiki-light:#2E8F82;--shiki-light-font-style:inherit;">Store</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">&lt;</span><span style="--shiki-dark:#FFB86C;--shiki-dark-font-style:italic;--shiki-light:#2E8F82;--shiki-light-font-style:inherit;">Id</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">,</span><span style="--shiki-dark:#FFB86C;--shiki-dark-font-style:italic;--shiki-light:#2E8F82;--shiki-light-font-style:inherit;"> S</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">,</span><span style="--shiki-dark:#FFB86C;--shiki-dark-font-style:italic;--shiki-light:#2E8F82;--shiki-light-font-style:inherit;"> G</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">,</span><span style="--shiki-dark:#FFB86C;--shiki-dark-font-style:italic;--shiki-light:#2E8F82;--shiki-light-font-style:inherit;"> A</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">&gt;</span></span></code></pre></div><p>Return type of <code>defineStore()</code>. Function that allows instantiating a store.</p><h2 id="Parameters" tabindex="-1">Parameters <a class="header-anchor" href="#Parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><h3 id="pinia-" tabindex="-1">pinia? <a class="header-anchor" href="#pinia-" aria-label="Permalink to &quot;pinia?&quot;">​</a></h3><p>Pinia instance to retrieve the store</p><p><code>null</code> | <a href="./Pinia.html"><code>Pinia</code></a></p><h3 id="hot-" tabindex="-1">hot? <a class="header-anchor" href="#hot-" aria-label="Permalink to &quot;hot?&quot;">​</a></h3><p><a href="./../type-aliases/StoreGeneric.html"><code>StoreGeneric</code></a></p><p>dev only hot module replacement</p><h2 id="Returns" tabindex="-1">Returns <a class="header-anchor" href="#Returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><a href="./../type-aliases/Store.html"><code>Store</code></a>&lt;<code>Id</code>, <code>S</code>, <code>G</code>, <code>A</code>&gt;</p><h2 id="Properties" tabindex="-1">Properties <a class="header-anchor" href="#Properties" aria-label="Permalink to &quot;Properties&quot;">​</a></h2><h3 id="-id" tabindex="-1">$id <a class="header-anchor" href="#-id" aria-label="Permalink to &quot;$id&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes dracula-soft vitesse-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#F6F6F4;--shiki-light:#59873A;">$id</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">:</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#B07D48;"> Id</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">;</span></span></code></pre></div><p>Id of the store. Used by map helpers.</p>',25)]))}const f=i(n,[["render",r]]);export{k as __pageData,f as default};
