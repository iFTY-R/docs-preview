import{_ as e,c as s,o as t,a2 as i}from"./chunks/framework.DMet4H9D.js";const k=JSON.parse('{"title":"_StoreWithState<Id, S, G, A>","description":"","frontmatter":{"editLink":false},"headers":[],"relativePath":"api/pinia/interfaces/StoreWithState.md","filePath":"api/pinia/interfaces/StoreWithState.md"}'),n={name:"api/pinia/interfaces/StoreWithState.md"};function l(h,a,o,r,d,p){return t(),s("div",null,a[0]||(a[0]=[i(`<p><a href="./../../">@pinia/root</a> / <a href="./../">pinia</a> / _StoreWithState</p><h1 id="-StoreWithState-Id-S-G-A-" tabindex="-1">_StoreWithState&lt;Id, S, G, A&gt; <a class="header-anchor" href="#-StoreWithState-Id-S-G-A-" aria-label="Permalink to &quot;\\_StoreWithState\\&lt;Id, S, G, A\\&gt;&quot;">​</a></h1><p>Base store with state and functions. Should not be used directly.</p><h2 id="Extends" tabindex="-1">Extends <a class="header-anchor" href="#Extends" aria-label="Permalink to &quot;Extends&quot;">​</a></h2><ul><li><a href="./StoreProperties.html"><code>StoreProperties</code></a>&lt;<code>Id</code>&gt;</li></ul><h2 id="Type-Parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#Type-Parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h2><p>• <strong>Id</strong> <em>extends</em> <code>string</code></p><p>• <strong>S</strong> <em>extends</em> <a href="./../type-aliases/StateTree.html"><code>StateTree</code></a></p><p>• <strong>G</strong></p><p>• <strong>A</strong></p><h2 id="Properties" tabindex="-1">Properties <a class="header-anchor" href="#Properties" aria-label="Permalink to &quot;Properties&quot;">​</a></h2><h3 id="-customProperties" tabindex="-1">_customProperties <a class="header-anchor" href="#-customProperties" aria-label="Permalink to &quot;\\_customProperties&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes dracula-soft vitesse-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#F6F6F4;--shiki-light:#59873A;">_customProperties</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">:</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#B07D48;"> Set</span><span style="--shiki-dark:#F286C4;--shiki-light:#999999;">&lt;</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#B07D48;">string</span><span style="--shiki-dark:#F286C4;--shiki-light:#999999;">&gt;</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">;</span></span></code></pre></div><p>Used by devtools plugin to retrieve properties added with plugins. Removed in production. Can be used by the user to add property keys of the store that should be displayed in devtools.</p><h4 id="Inherited-from" tabindex="-1">Inherited from <a class="header-anchor" href="#Inherited-from" aria-label="Permalink to &quot;Inherited from&quot;">​</a></h4><p><a href="./StoreProperties.html"><code>StoreProperties</code></a>.<a href="./StoreProperties.html#customproperties"><code>_customProperties</code></a></p><hr><h3 id="-id" tabindex="-1">$id <a class="header-anchor" href="#-id" aria-label="Permalink to &quot;$id&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes dracula-soft vitesse-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#F6F6F4;--shiki-light:#59873A;">$id</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">:</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#B07D48;"> Id</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">;</span></span></code></pre></div><p>Unique identifier of the store</p><h4 id="Inherited-from-1" tabindex="-1">Inherited from <a class="header-anchor" href="#Inherited-from-1" aria-label="Permalink to &quot;Inherited from&quot;">​</a></h4><p><a href="./StoreProperties.html"><code>StoreProperties</code></a>.<a href="./StoreProperties.html#id"><code>$id</code></a></p><hr><h3 id="-state" tabindex="-1">$state <a class="header-anchor" href="#-state" aria-label="Permalink to &quot;$state&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes dracula-soft vitesse-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#F6F6F4;--shiki-light:#59873A;">$state</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">:</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#B07D48;"> UnwrapRef</span><span style="--shiki-dark:#F286C4;--shiki-light:#999999;">&lt;</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#B07D48;">S</span><span style="--shiki-dark:#F286C4;--shiki-light:#999999;">&gt;</span><span style="--shiki-dark:#F286C4;--shiki-light:#AB5959;"> &amp;</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#B07D48;"> PiniaCustomStateProperties</span><span style="--shiki-dark:#F286C4;--shiki-light:#999999;">&lt;</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#B07D48;">S</span><span style="--shiki-dark:#F286C4;--shiki-light:#999999;">&gt;</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">;</span></span></code></pre></div><p>State of the Store. Setting it will internally call <code>$patch()</code> to update the state.</p><h2 id="Methods" tabindex="-1">Methods <a class="header-anchor" href="#Methods" aria-label="Permalink to &quot;Methods&quot;">​</a></h2><h3 id="-dispose-" tabindex="-1">$dispose() <a class="header-anchor" href="#-dispose-" aria-label="Permalink to &quot;$dispose()&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes dracula-soft vitesse-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#62E884;--shiki-light:#59873A;">$dispose</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">()</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#393A34;">: </span><span style="--shiki-dark:#F286C4;--shiki-light:#AB5959;">void</span></span></code></pre></div><p>Stops the associated effect scope of the store and remove it from the store registry. Plugins can override this method to cleanup any added effects. e.g. devtools plugin stops displaying disposed stores from devtools. Note this doesn&#39;t delete the state of the store, you have to do it manually with <code>delete pinia.state.value[store.$id]</code> if you want to. If you don&#39;t and the store is used again, it will reuse the previous state.</p><h4 id="Returns" tabindex="-1">Returns <a class="header-anchor" href="#Returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>void</code></p><hr><h3 id="-onAction-" tabindex="-1">$onAction() <a class="header-anchor" href="#-onAction-" aria-label="Permalink to &quot;$onAction()&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes dracula-soft vitesse-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#62E884;--shiki-light:#59873A;">$onAction</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">(</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#B07D48;">callback</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">,</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#B07D48;"> detached</span><span style="--shiki-dark:#F286C4;--shiki-light:#AB5959;">?</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#393A34;">)</span><span style="--shiki-dark:#F286C4;--shiki-light:#AB5959;">:</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;"> ()</span><span style="--shiki-dark:#F286C4;--shiki-light:#999999;"> =&gt;</span><span style="--shiki-dark:#F286C4;--shiki-light:#AB5959;"> void</span></span></code></pre></div><p>Setups a callback to be called every time an action is about to get invoked. The callback receives an object with all the relevant information of the invoked action:</p><ul><li><code>store</code>: the store it is invoked on</li><li><code>name</code>: The name of the action</li><li><code>args</code>: The parameters passed to the action</li></ul><p>On top of these, it receives two functions that allow setting up a callback once the action finishes or when it fails.</p><p>It also returns a function to remove the callback. Note than when calling <code>store.$onAction()</code> inside of a component, it will be automatically cleaned up when the component gets unmounted unless <code>detached</code> is set to true.</p><h4 id="Parameters" tabindex="-1">Parameters <a class="header-anchor" href="#Parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><h5 id="callback" tabindex="-1">callback <a class="header-anchor" href="#callback" aria-label="Permalink to &quot;callback&quot;">​</a></h5><p><a href="./../type-aliases/StoreOnActionListener.html"><code>StoreOnActionListener</code></a>&lt;<code>Id</code>, <code>S</code>, <code>G</code>, <code>A</code>&gt;</p><p>callback called before every action</p><h5 id="detached-" tabindex="-1">detached? <a class="header-anchor" href="#detached-" aria-label="Permalink to &quot;detached?&quot;">​</a></h5><p><code>boolean</code></p><p>detach the subscription from the context this is called from</p><h4 id="Returns-1" tabindex="-1">Returns <a class="header-anchor" href="#Returns-1" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>Function</code></p><p>function that removes the watcher</p><h5 id="Returns-2" tabindex="-1">Returns <a class="header-anchor" href="#Returns-2" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p><code>void</code></p><h4 id="Example" tabindex="-1">Example <a class="header-anchor" href="#Example" aria-label="Permalink to &quot;Example&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes dracula-soft vitesse-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#F6F6F4;--shiki-light:#B07D48;">store</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">.</span><span style="--shiki-dark:#62E884;--shiki-light:#59873A;">$onAction</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">(({</span><span style="--shiki-dark:#FFB86C;--shiki-dark-font-style:italic;--shiki-light:#B07D48;--shiki-light-font-style:inherit;"> after</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">,</span><span style="--shiki-dark:#FFB86C;--shiki-dark-font-style:italic;--shiki-light:#B07D48;--shiki-light-font-style:inherit;"> onError</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;"> })</span><span style="--shiki-dark:#F286C4;--shiki-light:#999999;"> =&gt;</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;"> {</span></span>
<span class="line"><span style="--shiki-dark:#7B7F8B;--shiki-light:#A0ADA0;"> // Here you could share variables between all of the hooks as well as</span></span>
<span class="line"><span style="--shiki-dark:#7B7F8B;--shiki-light:#A0ADA0;"> // setting up watchers and clean them up</span></span>
<span class="line"><span style="--shiki-dark:#62E884;--shiki-light:#59873A;"> after</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">((</span><span style="--shiki-dark:#FFB86C;--shiki-dark-font-style:italic;--shiki-light:#B07D48;--shiki-light-font-style:inherit;">resolvedValue</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">)</span><span style="--shiki-dark:#F286C4;--shiki-light:#999999;"> =&gt;</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;"> {</span></span>
<span class="line"><span style="--shiki-dark:#7B7F8B;--shiki-light:#A0ADA0;">   // can be used to cleanup side effects</span></span>
<span class="line"><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">.</span><span style="--shiki-dark:#7B7F8B;--shiki-light:#A0ADA0;">  // \`resolvedValue\` is the value returned by the action, if it&#39;s a</span></span>
<span class="line"><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">.</span><span style="--shiki-dark:#7B7F8B;--shiki-light:#A0ADA0;">  // Promise, it will be the resolved value instead of the Promise</span></span>
<span class="line"><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;"> })</span></span>
<span class="line"><span style="--shiki-dark:#62E884;--shiki-light:#59873A;"> onError</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">((</span><span style="--shiki-dark:#FFB86C;--shiki-dark-font-style:italic;--shiki-light:#B07D48;--shiki-light-font-style:inherit;">error</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">)</span><span style="--shiki-dark:#F286C4;--shiki-light:#999999;"> =&gt;</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;"> {</span></span>
<span class="line"><span style="--shiki-dark:#7B7F8B;--shiki-light:#A0ADA0;">   // can be used to pass up errors</span></span>
<span class="line"><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;"> })</span></span>
<span class="line"><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">})</span></span></code></pre></div><hr><h3 id="-patch-" tabindex="-1">$patch() <a class="header-anchor" href="#-patch-" aria-label="Permalink to &quot;$patch()&quot;">​</a></h3><h4 id="Call-Signature" tabindex="-1">Call Signature <a class="header-anchor" href="#Call-Signature" aria-label="Permalink to &quot;Call Signature&quot;">​</a></h4><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes dracula-soft vitesse-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#62E884;--shiki-light:#59873A;">$patch</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">(</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#B07D48;">partialState</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">)</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#393A34;">: </span><span style="--shiki-dark:#F286C4;--shiki-light:#AB5959;">void</span></span></code></pre></div><p>Applies a state patch to current state. Allows passing nested values</p><h5 id="Parameters-1" tabindex="-1">Parameters <a class="header-anchor" href="#Parameters-1" aria-label="Permalink to &quot;Parameters&quot;">​</a></h5><h6 id="partialState" tabindex="-1">partialState <a class="header-anchor" href="#partialState" aria-label="Permalink to &quot;partialState&quot;">​</a></h6><p><a href="./../type-aliases/DeepPartial.html"><code>_DeepPartial</code></a>&lt;<code>UnwrapRef</code>&lt;<code>S</code>&gt;&gt;</p><p>patch to apply to the state</p><h5 id="Returns-3" tabindex="-1">Returns <a class="header-anchor" href="#Returns-3" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p><code>void</code></p><h4 id="Call-Signature-1" tabindex="-1">Call Signature <a class="header-anchor" href="#Call-Signature-1" aria-label="Permalink to &quot;Call Signature&quot;">​</a></h4><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes dracula-soft vitesse-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#62E884;--shiki-light:#59873A;">$patch</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">&lt;</span><span style="--shiki-dark:#FFB86C;--shiki-dark-font-style:italic;--shiki-light:#2E8F82;--shiki-light-font-style:inherit;">F</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">&gt;(</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#B07D48;">stateMutator</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">)</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#393A34;">: </span><span style="--shiki-dark:#F286C4;--shiki-light:#AB5959;">void</span></span></code></pre></div><p>Group multiple changes into one function. Useful when mutating objects like Sets or arrays and applying an object patch isn&#39;t practical, e.g. appending to an array. The function passed to <code>$patch()</code> <strong>must be synchronous</strong>.</p><h5 id="Type-Parameters-1" tabindex="-1">Type Parameters <a class="header-anchor" href="#Type-Parameters-1" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h5><p>• <strong>F</strong> <em>extends</em> (<code>state</code>) =&gt; <code>any</code></p><h5 id="Parameters-2" tabindex="-1">Parameters <a class="header-anchor" href="#Parameters-2" aria-label="Permalink to &quot;Parameters&quot;">​</a></h5><h6 id="stateMutator" tabindex="-1">stateMutator <a class="header-anchor" href="#stateMutator" aria-label="Permalink to &quot;stateMutator&quot;">​</a></h6><p><code>ReturnType</code>&lt;<code>F</code>&gt; <em>extends</em> <code>Promise</code>&lt;<code>any</code>&gt; ? <code>never</code> : <code>F</code></p><p>function that mutates <code>state</code>, cannot be asynchronous</p><h5 id="Returns-4" tabindex="-1">Returns <a class="header-anchor" href="#Returns-4" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p><code>void</code></p><hr><h3 id="-reset-" tabindex="-1">$reset() <a class="header-anchor" href="#-reset-" aria-label="Permalink to &quot;$reset()&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes dracula-soft vitesse-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#62E884;--shiki-light:#59873A;">$reset</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">()</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#393A34;">: </span><span style="--shiki-dark:#F286C4;--shiki-light:#AB5959;">void</span></span></code></pre></div><p>Resets the store to its initial state by building a new state object.</p><h4 id="Returns-5" tabindex="-1">Returns <a class="header-anchor" href="#Returns-5" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>void</code></p><hr><h3 id="-subscribe-" tabindex="-1">$subscribe() <a class="header-anchor" href="#-subscribe-" aria-label="Permalink to &quot;$subscribe()&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes dracula-soft vitesse-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#62E884;--shiki-light:#59873A;">$subscribe</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">(</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#B07D48;">callback</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">,</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#B07D48;"> options</span><span style="--shiki-dark:#F286C4;--shiki-light:#AB5959;">?</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#393A34;">)</span><span style="--shiki-dark:#F286C4;--shiki-light:#AB5959;">:</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;"> ()</span><span style="--shiki-dark:#F286C4;--shiki-light:#999999;"> =&gt;</span><span style="--shiki-dark:#F286C4;--shiki-light:#AB5959;"> void</span></span></code></pre></div><p>Setups a callback to be called whenever the state changes. It also returns a function to remove the callback. Note that when calling <code>store.$subscribe()</code> inside of a component, it will be automatically cleaned up when the component gets unmounted unless <code>detached</code> is set to true.</p><h4 id="Parameters-3" tabindex="-1">Parameters <a class="header-anchor" href="#Parameters-3" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><h5 id="callback-1" tabindex="-1">callback <a class="header-anchor" href="#callback-1" aria-label="Permalink to &quot;callback&quot;">​</a></h5><p><a href="./../type-aliases/SubscriptionCallback.html"><code>SubscriptionCallback</code></a>&lt;<code>S</code>&gt;</p><p>callback passed to the watcher</p><h5 id="options-" tabindex="-1">options? <a class="header-anchor" href="#options-" aria-label="Permalink to &quot;options?&quot;">​</a></h5><p><code>object</code> &amp; <code>WatchOptions</code>&lt;<code>boolean</code>&gt;</p><p><code>watch</code> options + <code>detached</code> to detach the subscription from the context (usually a component) this is called from. Note that the <code>flush</code> option does not affect calls to <code>store.$patch()</code>.</p><h4 id="Returns-6" tabindex="-1">Returns <a class="header-anchor" href="#Returns-6" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>Function</code></p><p>function that removes the watcher</p><h5 id="Returns-7" tabindex="-1">Returns <a class="header-anchor" href="#Returns-7" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p><code>void</code></p>`,97)]))}const u=e(n,[["render",l]]);export{k as __pageData,u as default};
