import{_ as s,c as t,o as a,a2 as i}from"./chunks/framework.DMet4H9D.js";const k=JSON.parse('{"title":"storeToRefs()","description":"","frontmatter":{"editLink":false},"headers":[],"relativePath":"api/pinia/functions/storeToRefs.md","filePath":"api/pinia/functions/storeToRefs.md"}'),r={name:"api/pinia/functions/storeToRefs.md"};function o(n,e,l,h,p,d){return a(),t("div",null,e[0]||(e[0]=[i('<p><a href="./../../">@pinia/root</a> / <a href="./../">pinia</a> / storeToRefs</p><h1 id="storeToRefs-" tabindex="-1">storeToRefs() <a class="header-anchor" href="#storeToRefs-" aria-label="Permalink to &quot;storeToRefs()&quot;">​</a></h1><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes dracula-soft vitesse-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#F286C4;--shiki-light:#AB5959;">function</span><span style="--shiki-dark:#62E884;--shiki-light:#59873A;"> storeToRefs</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">&lt;</span><span style="--shiki-dark:#FFB86C;--shiki-dark-font-style:italic;--shiki-light:#2E8F82;--shiki-light-font-style:inherit;">SS</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">&gt;(</span><span style="--shiki-dark:#FFB86C;--shiki-dark-font-style:italic;--shiki-light:#B07D48;--shiki-light-font-style:inherit;">store</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">)</span><span style="--shiki-dark:#F286C4;--shiki-light:#999999;">:</span><span style="--shiki-dark:#97E1F1;--shiki-dark-font-style:italic;--shiki-light:#2E8F82;--shiki-light-font-style:inherit;"> StoreToRefs</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">&lt;</span><span style="--shiki-dark:#FFB86C;--shiki-dark-font-style:italic;--shiki-light:#2E8F82;--shiki-light-font-style:inherit;">SS</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">&gt;</span></span></code></pre></div><p>Creates an object of references with all the state, getters, and plugin-added state properties of the store. Similar to <code>toRefs()</code> but specifically designed for Pinia stores so methods and non reactive properties are completely ignored.</p><h2 id="Type-Parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#Type-Parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h2><p>• <strong>SS</strong> <em>extends</em> <a href="./../type-aliases/StoreGeneric.html"><code>StoreGeneric</code></a></p><h2 id="Parameters" tabindex="-1">Parameters <a class="header-anchor" href="#Parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><h3 id="store" tabindex="-1">store <a class="header-anchor" href="#store" aria-label="Permalink to &quot;store&quot;">​</a></h3><p><code>SS</code></p><p>store to extract the refs from</p><h2 id="Returns" tabindex="-1">Returns <a class="header-anchor" href="#Returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><code>StoreToRefs</code>&lt;<code>SS</code>&gt;</p>',12)]))}const f=s(r,[["render",o]]);export{k as __pageData,f as default};
