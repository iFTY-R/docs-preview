import{_ as i,c as t,o as a,a2 as s}from"./chunks/framework.DMet4H9D.js";const g=JSON.parse('{"title":"createTestingPinia()","description":"","frontmatter":{"editLink":false},"headers":[],"relativePath":"api/@pinia/testing/functions/createTestingPinia.md","filePath":"api/@pinia/testing/functions/createTestingPinia.md"}'),n={name:"api/@pinia/testing/functions/createTestingPinia.md"};function o(r,e,c,h,p,l){return a(),t("div",null,e[0]||(e[0]=[s('<p><a href="./../../../">@pinia/root</a> / <a href="./../">@pinia/testing</a> / createTestingPinia</p><h1 id="createTestingPinia-" tabindex="-1">createTestingPinia() <a class="header-anchor" href="#createTestingPinia-" aria-label="Permalink to &quot;createTestingPinia()&quot;">​</a></h1><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes dracula-soft vitesse-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#F286C4;--shiki-light:#AB5959;">function</span><span style="--shiki-dark:#62E884;--shiki-light:#59873A;"> createTestingPinia</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">(</span><span style="--shiki-dark:#FFB86C;--shiki-dark-font-style:italic;--shiki-light:#B07D48;--shiki-light-font-style:inherit;">options</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">)</span><span style="--shiki-dark:#F286C4;--shiki-light:#999999;">:</span><span style="--shiki-dark:#97E1F1;--shiki-dark-font-style:italic;--shiki-light:#2E8F82;--shiki-light-font-style:inherit;"> TestingPinia</span></span></code></pre></div><p>Creates a pinia instance designed for unit tests that <strong>requires mocking</strong> the stores. By default, <strong>all actions are mocked</strong> and therefore not executed. This allows you to unit test your store and components separately. You can change this with the <code>stubActions</code> option. If you are using jest, they are replaced with <code>jest.fn()</code>, otherwise, you must provide your own <code>createSpy</code> option.</p><h2 id="Parameters" tabindex="-1">Parameters <a class="header-anchor" href="#Parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><h3 id="options" tabindex="-1">options <a class="header-anchor" href="#options" aria-label="Permalink to &quot;options&quot;">​</a></h3><p><a href="./../interfaces/TestingOptions.html"><code>TestingOptions</code></a> = <code>{}</code></p><p>options to configure the testing pinia</p><h2 id="Returns" tabindex="-1">Returns <a class="header-anchor" href="#Returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><a href="./../interfaces/TestingPinia.html"><code>TestingPinia</code></a></p><p>a augmented pinia instance</p>',11)]))}const u=i(n,[["render",o]]);export{g as __pageData,u as default};
